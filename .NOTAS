-------------- COMPLETADAS --------------

Unitarias - COMPLETADA
Aceptacion -
Integracion - COMPLETADA - PR.UNITARIA
Rendimiento - COMPLETADA
Cobertura -
Seguridad -
end to end - COMPLETADA - PR.INTEGRACION



--------------- TIPOS DE PRUEBAS ---------------

Pruebas unitarias: Pruebas que se centran en una unidad individual de código,
como un método o una clase, para verificar su comportamiento.

Pruebas de integración: Pruebas que verifican cómo interactúan varias unidades de código juntas.
Pueden probar la integración entre clases, módulos o sistemas externos.

Pruebas de aceptación: Pruebas que validan si una aplicación cumple con los requisitos y expectativas
del usuario. Estas pruebas suelen ser de alto nivel y pueden incluir pruebas de interfaz de usuario,
pruebas de extremo a extremo y pruebas de aceptación automatizadas.

Pruebas de regresión: Pruebas que se realizan para asegurarse de que los cambios recientes en el código
no hayan introducido nuevos errores y que el código existente siga funcionando como se espera.

Pruebas de rendimiento: Pruebas que evalúan el rendimiento del código, como su tiempo de ejecución,
uso de recursos y escalabilidad bajo carga.

Pruebas de cobertura: Pruebas que evalúan la cantidad de código que está siendo ejecutada por las pruebas.
La cobertura de código puede ayudar a identificar áreas no probadas y mejorar la confianza en la calidad
del código.

Pruebas de seguridad: Pruebas que se centran en identificar y corregir vulnerabilidades de seguridad
en el código, como vulnerabilidades de inyección de SQL, ataques de scripting entre sitios (XSS)
y ataques de falsificación de solicitudes entre sitios (CSRF).





-------------- PRUEBAS CON HERRAMIENTAS --------------

Laravel Dusk: Es una herramienta específicamente diseñada para aplicaciones Laravel.
Tiene una sintaxis amigable y una integración muy sencilla con el ecosistema Laravel.
Es ideal si estás trabajando en un proyecto Laravel y deseas una solución rápida y fácil
de usar para las pruebas de extremo a extremo.

Cypress: Es una herramienta moderna y potente para pruebas de extremo a extremo.
Es agnóstica de la tecnología y puede utilizarse con cualquier stack tecnológico,
incluido Laravel. Cypress tiene una sintaxis clara y fácil de entender, y proporciona una
interfaz de usuario visual para el desarrollo y ejecución de pruebas.

Selenium WebDriver: Es una herramienta más genérica y ampliamente utilizada para pruebas
de extremo a extremo. Puede utilizarse con cualquier stack tecnológico, incluido Laravel.
Selenium WebDriver es altamente flexible y compatible con múltiples lenguajes de programación,
lo que lo hace ideal si necesitas una solución que pueda adaptarse a diferentes tecnologías.







--------------- CONVENCIONES ---------------

ESTRUCUTURA DE DIRECTORIOS:

tests/Feature: Aquí se colocan las pruebas que evalúan características completas del sistema,
como la interacción entre diferentes componentes.

tests/Unit: Aquí se colocan las pruebas unitarias, que prueban pequeñas unidades de código,
como funciones individuales o métodos de clases.



CONVENCIONES DE NOMBRES:

Los nombres de las pruebas siempre deben termianr en test.php. Se utiliza camelcase.

En las funciones se inicia el nombre con test. O simplemente se hace muy descriptiva la funcion del test.



ASSERCIONES COMUNES DENTRO DE PHPUNIT:

assertStatus ( ) = Verifica el código de estado HTTP.
assertSee ( ) = Verifica que un texto está presente en la respuesta.
assertDatabasehas ( ) = Verifica que una tabla tiene ciertos datos.
assertDatabaseMissing ( ) = Verifica que una tabla no tiene ciertos datos.




HELPERS;

actingAs = Simula que los usuarios estas autenticados




--------------- AFIRMACIONES ---------------

Entender como implementar las afirmaciones en las pruebas.


Verifica que una condicion sea verdadera
$this->assertTrue($variable === true);


Verifica que una condicion sea falsa
$this->assertFalse($variable === true);


Verifica que dos valores ean iguales
$this->assertEquals(10, 5 + 5);


Verifica que dos valores sean identicos
$this->assertSame('foo', 'foo');


Verifica que dos valores no sean iguales
$this->assertNotEquals(10, 5 + 4);


Verifica que dos valores no sean identicos
$this->assertNotSame('foo', 'bar');


Verifica que un valor sea nulo
$this->assertNull($variable);


Verifica que un valor no sea nulo
$this->assertNotNull($variable);


Verifiaca que un valor este vacio
$this->assertEmpty([]);


Verifica que un valor no este vacio
$this->assertNotEmpty([1, 2, 3]);


Verifica el numero de elementos dentro de un array
$this->assertCount(3, [1, 2, 3]);


Verifica que un objeto sea una instancia de una clase específica.
$this->assertInstanceOf(MyClass::class, $object);


Verifica que un valor exista dentro de un array o una cadena.
$this->assertContains('foo', ['foo', 'bar']);


Verifica que una cadena contenga otra cadena.
$this->assertStringContainsString('foo', 'foo bar');


Verifica que un array tenga una clave específica.
$this->assertArrayHasKey('key', ['key' => 'value']);





--------------- ANOTACIONES ---------------

@test
- Indica que el método es un test. No es necesario si el método comienza con 'test'.

@before
- Ejecuta el método antes de cada test. Útil para configurar el entorno de prueba.

@after
- Ejecuta el método después de cada test. Útil para limpiar el entorno de prueba.

@beforeClass
- Ejecuta el método una vez antes de todos los tests en la clase. Debe ser estático.

@afterClass
- Ejecuta el método una vez después de todos los tests en la clase. Debe ser estático.

@dataProvider proveedorDeDatos
- Especifica el método que proporciona datos para el test. El proveedor de datos debe devolver
un array de arrays.

@depends metodoDependiente
- Indica que el test depende del resultado de otro método de test.

@group nombreDelGrupo
- Asigna el test a un grupo específico. Útil para ejecutar subconjuntos de tests.

@covers \NombreClase::nombreMetodo
- Indica que el test cubre una clase o método específico para análisis de cobertura.

@throws \NombreExcepcion
- Indica que el test espera que se lance una excepción específica.





--------------- ESTADOS DE PRUEBAS ---------------


Passing (Pasado): El test se ejecutó correctamente y todas las aserciones pasaron sin errores.

Failing (Fallido): El test se ejecutó, pero al menos una aserción falló, lo que indica que
el comportamiento esperado no se cumplió.

Error (Error): Se produjo un error durante la ejecución del test, que generalmente indica un problema
en el código de prueba o en el código que está siendo probado.

Skipped (Omitido): El test fue omitido deliberadamente, generalmente debido a ciertas condiciones
o configuraciones que no se cumplieron.

Incomplete (Incompleto): El test se considera incompleto porque no pudo ser completamente ejecutado
debido a alguna limitación o condición no cumplida.





--------------- CODIGOS DE ERROR ---------------


404 Not Found: Este es un código de estado HTTP que indica que el recurso solicitado no fue encontrado en el servidor. Es comúnmente asociado con páginas web.

500 Internal Server Error: Otro código de estado HTTP que indica un error interno en el servidor que impide que se complete la solicitud del cliente.

403 Forbidden: Este código de estado HTTP indica que el servidor entendió la solicitud del cliente, pero se niega a responderla debido a que el cliente no tiene permiso para acceder al recurso solicitado.

401 Unauthorized: Indica que la solicitud no ha sido aplicada porque carece de credenciales de autenticación válidas para el recurso solicitado.

502 Bad Gateway: Este error se produce cuando un servidor actuando como puerta de enlace o proxy recibe una respuesta inválida del servidor ascendente.

503 Service Unavailable: Indica que el servidor no está listo para manejar la solicitud. Esto puede ser temporal si el servidor está sobrecargado o en mantenimiento.

400 Bad Request: Indica que el servidor no pudo interpretar la solicitud del cliente debido a un error en la sintaxis de la solicitud.

504 Gateway Timeout: Indica que el servidor que actúa como puerta de enlace o proxy no recibió una respuesta a tiempo del servidor ascendente.

429 Too Many Requests: Este código indica que el cliente ha excedido el límite de solicitudes permitidas en un período de tiempo determinado.

200 OK: Un código de estado HTTP que indica que la solicitud ha tenido éxito.




--------------- RESUMEN ---------------

ChromeDriver , Dusk ~ No pude hacer que se ejecutaran en las pruebas, saltaba error de que no estaban
instaladas ( estas herramientas simulan las cosas que haria un usuario )

DatabaseTransactions ~ Si esta dentro del codigo elimina el registro creado apenas termine de ejecutarse
la prueba. Para poder ver el registro que se esta creando toca quitarlo.
